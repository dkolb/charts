{{ template "chart.header" . }}
{{ template "chart.description" . }}

{{ template "chart.versionBadge" . }}

## Accessing inital password

You will want to run `kubectl get pod` to find the pod name and then
use `kubectl logs` to retrieve the stdout logs.

## Initial server setup

Depending on how you do your persistence, you may need to access the 
pod to do the initial setup.  The crafty-controller docker container has
wget installed so you can use `kubectl exec` to get a shell on the pod and 
layout your server directories and do initial downloads.

If you prefer you can create an empty file so long as it has a `.jar` extension
and use that as your first server to get past the initial config screen.

## Current Limitations

### Ingressing the Minecraft Ports

By their nature, Minecraft only exists in one controller pod. This chart
kinda makes some assumptions about how it's run, mainly that there is one
pod per namespace and likely that pod targets a very specific instance.

If you wish to use ClusterIP for the minecraft server services as opposed to
NodeIP, you will need to write your own TCP Ingress.  The most popular, 
NGINX controller requires some work with setting up ConfigMaps and would make
the chart less agnostic.

Most cloud provider load balancers support TCP balancing and can provide
another way to get traffic into your cluster via a `LoadBalancer` service type
and annotations on the service.

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesHeader" . }}

### Annotations

All annotations values are simply key/value objects directly as if you
were writing the k8s manifest.

{{ template "chart.valuesTable" . }}
